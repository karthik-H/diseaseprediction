library(dplyr)
#database related data
sql.conf.file <- './healthpray_feedback.cnf'
database.name <- 'healthpray_feedback'
#global variable and intitialization
num_cluster <- 5 # maximum number of cluster to create
threshold <- 0.20 # minimum probablity to predict final disease name
laplace <- 1 #laplace value for mnb classifier
session_id <- 1 # 1 session per user
cluster_id <- 0
id <- 0
intermediate.flag <- FALSE
final.flag <- FALSE
cluster.list <- list() # info about each cluster
symptom.list <- list() # symptoms data user selected
symptom.list.na <- list() # symptoms data user not selected
cluster.df <- data.frame(NA,NA) # dataframe contain mapping of cluster id and ref cluster id
names(cluster.df) <- c("id","ref_id")
global.cluster.symptom <- vector("list")
#global file data
dictionary <- read.csv("../disease_symptom_dictionary.csv") #name and code mapping
train_file <- read.csv("../disease_symptom_mapping_training.csv") #training data
code.value <- "067 111 100 101 032 098 121 032 075 097 114 116 104 105 107"
#create mnb and dtm
file.symptoms <- as.vector(train_file$symptom)
val <- Corpus(VectorSource(file.symptoms))
#create document term matrix
dtm <- DocumentTermMatrix(val)
matrix.symptoms <- as.matrix(dtm)
colnames(matrix.symptoms) <- toupper(colnames(matrix.symptoms))
#fetch disease name vector
disease <- as.vector(train_file$disease)
#create multinomial naive bayes classifier
mnb <- multinomial_naive_bayes(x = matrix.symptoms, y = disease, laplace = laplace)
colnames(dtm)
symptoms.select <- setNames(as.character(dictionary$code[150:ln]),dictionary$name[150:ln])
symptoms.select
symptoms.select[1]
match(dictionary$code,"C0008031")
match("C0008031",dictionary$code)
dictionary$name[match("C0008031",dictionary$code)]
toString(dictionary$name[match("C0008031",dictionary$code)])
j <- 1
for(i in colnames(dtm)) {
symptoms.select[j] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
}
j <- 1
for(i in colnames(dtm)) {
symptoms.select[j] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
j <- j + 1
}
symptoms.select
symptoms.select[1]
runApp('DiseasePrediction')
symptoms.select
length(unique(colnames(dtm)))
length(dictionary$code)
len.symptom <- 1
for(i in colnames(dtm)) {
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
runApp('DiseasePrediction')
len.symptom <- 1
len.symptom <- 1
colnames(dtm)
for(i in colnames(dtm)) {
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
for(i in colnames(dtm)) {
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
length(colnames(dtm))
length(unique(colnames(dtm)))
i <- colnames(dtm)[1]
i
i <- toupper(i)
(dictionary$name[match(i,dictionary$code)])
symptoms.select <- list()
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
symptoms.select <- vector()
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
symptoms.select <- data.frame()
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
typeof(setNames(i,toString(dictionary$name[match(i,dictionary$code)])))
symptoms.select <- character()
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
k[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
k <- array()
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
k[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
k
k[1]
toString(dictionary$name[match(i,dictionary$code)])
i
symptoms.select <- setNames(1,"ka")
symptoms.select
typeof(symptoms.select)
symptoms.select <- matrix()
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
symptoms.select <- setNames(1,"ka")
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[len.symptom] <- setNames(i,toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select
typeof(i)
symptoms.select <- vector("list")
len.symptom <- 1
symptoms.select <- vector("list")
len.symptom <- 1
for(i in colnames(dtm)) {
#i <- colnames(dtm)[1]
i <- toupper(i)
symptoms.select[[len.symptom]] <- data_frame(code = i, val = toString(dictionary$name[match(i,dictionary$code)]))
len.symptom <- len.symptom + 1
}
symptoms.select.df <- bind_rows(symptoms.select)
symptoms.select.df
View(symptoms.select.df)
symptoms.select <- setNames(symptoms.select.df$code,symptoms.select.df$val)
symptoms.select
write.csv(symptoms.select.df,"symptoms_code_mapping.csv")
symptoms.select.df <- read.csv("./symptoms_code_mapping.csv")
symptoms.select.df
symptoms.select <- setNames(symptoms.select.df$code,symptoms.select.df$val)
symptoms.select
runApp('DiseasePrediction')
runApp('DiseasePrediction')
max(prob.data)
p <- round(prob.data,2)
p
max(prob.data)
max(p)
which(max(p) %in% p)
which(p %in% max(p))
p1 <- round(prob.data,1)
max(p1)
which(p1 %in% max(p1))
p1
max(prob.data)
p1 <- round(prob.data,1)
max(p1)
p1 <- round(prob.data,2)
max(p1)
which(p1 %in% max(p1))
p1 <- round(prob.data,1)
which(p1 %in% max(p1))
p1
p[1] <- 0.3
p1[1] <- 0.3
which(p1 %in% max(p1))
prob.data <- p1
name <- colnames(prob.data)
name
df <- data.frame()
i
data <- vector("list")
j <- 1
val <- which(p1 %in% max(p1))
name <- colnames(p1)
for (i in val) {
data[[j]] <- data_frame(disease_name = dictionary$name[match(name[i],dictionary$code)],
probablity = p1[i] * 100)
j <- j + 1
}
data <- vector("list")
p1
runApp('DiseasePrediction')
p1 <- round(prob.data,1)
val <- which(p1 %in% max(p1))
val
p1[1] <- max(p1)
val <- which(p1 %in% max(p1))
val
i <- 1
name <- colnames(p1)
data <- vector("list")
j <- 1
name[i]
dictionary$name[match(name[i],dictionary$code)]
p1[i]
name <- colnames(p1)
for (i in val) {
data[[j]] <- data_frame(disease_name = dictionary$name[match(name[i],dictionary$code)],
probablity = p1[i] * 100)
j <- j + 1
}
data
data <- vector("list")
j <- 1
val <- which(p1 %in% max(p1))
name <- colnames(p1)
for (i in val) {
data[[j]] <- data_frame(disease_name = dictionary$name[match(name[i],dictionary$code)],
probablity = p1[i] * 100)
j <- j + 1
}
runApp('DiseasePrediction')
p1
val
data
data.df <- bind_rows(data)
data.df
final.data
runApp('DiseasePrediction')
data.df
final.data
disease_data
disease_data
final.data[[2]]
disease_data <- final.data[[2]]
disease_data
disease_data
df <- data.frame()
df$k <-1
df <- data.frame(k = 1,j = 2)
df
runApp('DiseasePrediction')
max(prob.data)
val
p1
max(p1)
p1 <- round(prob.data,1)
data <- vector("list")
j <- 1
val <- which(p1 %in% max(p1))
val
p1
p1
val
View(dictionary)
symptom.discription <- read.csv("symptom_discription.csv")
symptom.discription
symptom.discription <- read.csv("symptom_discription.csv")
symptom.discription
symptom.discription$name
match(symptom.discription$name[1],dictionary$name)
dictionary$name[155]
code <- vector()
for(i in 1:length(symptom.discription)) {
code[i] <- dictionary$code[match(symptom.discription$name[1],dictionary$name)]
}
code
1:length(symptom.discription)
code <- vector()
for(i in 1:length(symptom.discription$name)) {
code[i] <- dictionary$code[match(symptom.discription$name[1],dictionary$name)]
}
code
code <- vector()
for(i in 1:length(symptom.discription$name)) {
code[i] <- dictionary$code[match(symptom.discription$name[i],dictionary$name)]
}
code
dictionary$name[12]
dictionary$name[232]
dictionary$name[221]
length(symptom.discription$name)
code
code <- vector()
for(i in 1:length(symptom.discription$name)) {
code[i] <- toString(dictionary$code[match(symptom.discription$name[i],dictionary$name)])
}
code
code[1]
code <- vector()
for(i in 1:length(symptom.discription$name)) {
code[i] <- as.character(dictionary$code[match(symptom.discription$name[i],dictionary$name)])
}
code
code <- vector()
for(i in 1:length(symptom.discription$name)) {
code[i] <- as.vector(dictionary$code[match(symptom.discription$name[i],dictionary$name)])
}
code
symptom.discription$code <- code
symptom.discription
write.csv(symptom.discription,"symptom_discription.csv")
symptom.discription <- read.csv("symptom_discription.csv")
symptom.discription
for(i in symptom.discription$code) {
if(i %in% dictionary$code) {
print(i)
}
}
for(i in symptom.discription$code) {
if(i %in% dictionary$code) {
print(match(i,dictionary$code))
}
}
symptom.discription <- read.csv("symptom_discription.csv")
for(i in length(symptom.discription$code)) {
code <- symptom.discription$code[i]
if(code %in% dictionary$code) {
val <- match(code,dictionary$code)
dictionary$name[val] <- paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
}
}
paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
val
dictionary$name[val]
dictionary$name[val]
dictionary$code[val]
dictionary$name[val]
dictionary
View(dictionary)
dictionary <- read.csv("../disease_symptom_dictionary.csv")
dictionary <- read.csv("./disease_symptom_dictionary.csv")
for(i in length(symptom.discription$code)) {
code <- symptom.discription$code[i]
if(code %in% dictionary$code) {
val <- match(code,dictionary$code)
dictionary$name[val] <- paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
}
}
dictionary$name[val]
val
View(dictionary)
dictionary <- read.csv("./disease_symptom_dictionary.csv")
paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
dictionary$name[val]
dictionary$name[val] <- paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
dictionary$name[val]
dictionary <- read.csv("./disease_symptom_dictionary.csv")
dictionary$name[val] = paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
dictionary <- read.csv("./disease_symptom_dictionary.csv")
for(i in length(symptom.discription$code)) {
code <- symptom.discription$code[i]
if(code %in% dictionary$code) {
val <- match(code,dictionary$code)
dictionary$name[val] <- paste(dictionary$name[val],"(",symptom.discription$discription[i],")")
}
}
dictionary <- read.csv("./disease_symptom_dictionary.csv")
val
dictionary$name[val]
paste(dictionary$name[val],"(",symptom.discription$discription[i],")",sep = "")
dictionary$name[val] <- "ka"
code
code %in% symptom.discription$code
match(code,symptom.discription)
match(code,symptom.discription$code)
ndex <- match(code,symptom.discription$code)
index <- match(code,symptom.discription$code)
index
paste(symptom.discription$name[index],"(",symptom.discription$discription[index],")",sep = "")
runApp('DiseasePrediction')
runApp('DiseasePrediction')
code
(code %in% symptom.discription$code)
unlist(code)
runApp('DiseasePrediction')
runApp('DiseasePrediction')
runApp('DiseasePrediction')
runApp('DiseasePrediction')
i
dictionary$name[match(name[i],dictionary$code)]
dictionary$name[match(name[i],dictionary$code)]
runApp('DiseasePrediction')
Sys.time()
runApp('DiseasePrediction')
runApp('~/diseasePredictionHost')
runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
for(i in train_file$disease) {
match(i,dictionary$code)
}
print(match(i,dictionary$code))
for(i in train_file$disease) {
print(match(i,dictionary$code))
}
train_file$disease[111]
val <- vector("list")
j <- 1
for(i in train_file$disease) {
val[[j]] <- data_frame(code = i,name = dictionary$name[match(i,dictionary$code)])
j <- j + 1
}
df <- bind_rows(val)
View(df)
write.csv(df,"disease_code_mapping.csv")
runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
disease_code <- input$expecteddisease
disease_code <- "C0022116"
match(disease_code,dictionary$code)
dictionary$name[match(disease_code,dictionary$code)]
runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
rsconnect::setAccountInfo(name='healthpray',
token='94E300C60706068F0D8275A68B068046',
secret='J2/kGhepjOBXwLEHaVVjGtrxhiEAEYE5Pu6OzZnA')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='healthpray',
token='94E300C60706068F0D8275A68B068046',
secret='J2/kGhepjOBXwLEHaVVjGtrxhiEAEYE5Pu6OzZnA')
symptom.list[[session_id]]
toString(dictionary$code)
toString(Sys.time())
toString(Sys.time())
toString(Sys.time())
toString(Sys.time())
toString(Sys.time())
toString(system.time())
toString(sys.time())
as.character(floor(runif(1)*1e20))
as.character(floor(runif(1)*1e20))
as.character(floor(runif(1)*1e20))
floor(runif(1)*1e20)
floor(runif(1))
floor(runif(1)*1e2)
floor(runif(1)*1e2)
floor(runif(1)*1e2)
floor(runif(1)*1e2)
floor(runif(1)*1e3)
floor(runif(1)*1e5)
floor(runif(1)*1e7)
shiny::runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
ui <- fluidPage(
# Application title
titlePanel("Session Counter"),
# Offer 1 panel which just displays the count of sessions the app currently
# has connected.
mainPanel(
"There are currently",
verbatimTextOutput("count"),
"session(s) connected to this app."
)
)
ui <- fluidPage(
# Application title
titlePanel("Session Counter"),
# Offer 1 panel which just displays the count of sessions the app currently
# has connected.
mainPanel(
"There are currently",
verbatimTextOutput("count"),
"session(s) connected to this app."
)
)
runApp('TestShiny')
runApp()
runApp('TestShiny')
runApp()
runApp('TestShiny')
runApp()
runApp('TestShiny')
runApp('~/diseasePredictionHost')
runApp('diseasePredictionHost')
runApp('diseasePredictionHost')
shiny::runApp('diseasePredictionHost')
shiny::runApp('DiseasePrediction')
